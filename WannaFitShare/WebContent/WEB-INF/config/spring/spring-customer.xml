<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<!-- 자동스캔설정 
		 dao annotation하지 않으면 아래와 같이 bean 등록해도 됨 , service도 아래와 같음 
	     <bean name="customerDao" class="com.wannafitshare.customer.dao.CustomerDaoImpl"
		 c:session-ref="sqlSessionTemplate"/> 
	-->
	<context:component-scan
		base-package="com.wannafitshare.controller,
										  com.wannafitshare.customer.dao,	
										  com.wannafitshare.customer.service,
										  com.spring.interceptor" />


	<mvc:annotation-driven /> 
	<!-- link 설정-->
	<!-- 메인페이지 -->
	<mvc:view-controller
		path="/index.do"
		view-name="index.tiles" />
	<!-- 등록페이지 -->
	<mvc:view-controller
		path="/customer/register_form.do"
		view-name="customer/register_form.tiles" />
		<mvc:view-controller
		path="/customer/friend_list.do"
		view-name="customer/friend_list.tiles" />
		
	
	<!-- 
		multipartResolver를 Bean으로 등록
		 - 역할 : 요청방식이 post이고 enctype이 multipart/form-data인 경우 업로드된 파일관련 처리를 해주는 Bean
		 - 호출시점 : handler 호출 하기 전에 먼저 호출이 된다.
		 - bean으로 등속시 빈 식별자(id/name)은 multipartResolver로 한다.
	 -->
	 
	 <!-- CommonsMultipartResolver치고 class 자동완성 -->
	 <bean name="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>	
		
		
	<!-- ViewResolver 등록 
		  Cotroller가 넘긴 view이름 (view name)을 통해 알맞은 view를 찾는 전달하는 컴포넌트
		   기본 ViewResolver : InternalResourceViewResolver 
		  BeanNameViewResolver : 뷰의 이름과 동일한 이름을 가지는 빈을 View로 사용
		   			                          사용자 정의 View 객체를 사용하는 경우 주로 사용	   			                          
	-->
	
	
	<!-- 로그인 확인 인터셉터 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/logincheck/**/*" />
			<bean class="com.spring.interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="1" />
	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"
		p:order="2" />
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3" />
	
			  
	<!-- TilesConfigurer 빈으로 등록 : tiles 설정파일을 등록 -->
	<bean
		name="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/config/tiles/tiles-defs.xml</value>
			</list>
		</property>
	</bean>	
	
	<!-- messageSource bean 등록 -->
	<bean
		name="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="common.message.error_message" />
	
	<!-- Database 연동 설정-->
	<bean
		name="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		p:driverClassName="oracle.jdbc.driver.OracleDriver"
		p:url="jdbc:oracle:thin:@127.0.0.1:1521:XE"
		p:username="wannafitshare"
		p:password="1111"
		p:maxTotal="100" />

	<bean
		name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:configLocation="/WEB-INF/config/mybatis/mybatis-config.xml"
		p:dataSource-ref="dataSource" />

	<bean
		name="SqlSession"
		class="org.mybatis.spring.SqlSessionTemplate"
		c:sqlSessionFactory-ref="sqlSessionFactory" />

</beans>
